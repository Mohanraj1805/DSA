LINKED LIST
```PYTHON
class Node:
    def __init__(self,data):
        self.data=data
        self.pointer=None
class LinkedList:
    def __init__(self):
        self.head=None
    def add(self,data):
        newNode=Node(data)
        if self.head is None: # ipo 1st node i.e head vanthu empty na the val is inseted in the node
            self.head=newNode
        else:
            cur =self.head
            while (cur.pointer is not None):
                cur=cur.pointer
            cur.pointer=newNode
    def print(self):
        cur=self.head
        while cur is not None:
            print(cur.data,end=' -> ')
            cur=cur.pointer
        print('None')
    def remove(self,data):
        if (self.head is not None):
            if self.head.data==data:
                self.head=self.head.pointer
            else:
                cur = self.head
                while cur.pointer is not None and  cur.pointer.data!=data:
                    cur=cur.pointer
                print()
                if cur.pointer is not None:
                    cur.pointer=cur.pointer.pointer
                
        else:
            print('LL is empty')
    def insert(self,data):
        new_node=Node(data)
        new_node.pointer=self.head
        self.head=new_node
    def insert_at(self,position,data):
        newNode=Node(data)
        if position==0:
            newNode.pointer=self.head
            self.head=newNode
            return 
        cur=self.head
        count=0
        while cur is not None and count < position-1:
            cur=cur.pointer
            count+=1 
        if cur is None:
            print(f'position {position} is out of bound')
            self.add(data)
        else:
            newNode.pointer=cur.pointer
            cur.pointer=newNode
            
        
        

linkedlist = LinkedList()
linkedlist.add(1)
linkedlist.add(2)
linkedlist.add(3)
linkedlist.add(4)
linkedlist.add(5)
linkedlist.add(6)
linkedlist.print()
linkedlist.remove(5)
linkedlist.print()
linkedlist.insert(0)
linkedlist.print()
linkedlist.insert_at(3,3)
linkedlist.print()
linkedlist.insert_at(10,7)
linkedlist.print()
```
